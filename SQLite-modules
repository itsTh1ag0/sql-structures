/* 
SELECT snippes, notes, statements 
FROM linkedin_course
WHERE Link IS 'https://www.linkedin.com/learning/exams/summative/courses/learning-sql-programming-8382385'
*/
------------------------

-- Selecting & Filtering/Conditoning : SELECT, FROM, WHERE
WHERE 'criteria' OR 'conditional'

SELECT
*
FROM
people
WHERE state_code='CA'; -- predicates can be strict or expressions
-- string predicates are 'case-sensitive' (it can be set on/off at DDL-DB DBMS schema)

-- Multipe Criterias : OR, AND, IS, NOT, !=, <>, ()
SELECT
first_name,
last_name AS surname
FROM
people
WHERE
(state_code <> 'NY' AND shirt_or_hat!='shirt')
OR city IS NOT 'Los Angeles'; 
-- logical 'and'(&&) y 'or'(||) op. are textual
-- comparison 'equalsTo'(=) op. can be textual (as 'IS')
-- expressions predicates(...=...) can or not be 'whitespaced' 
-- can be used different(!= & <>) ops. within expressions
-- brackets (parentheses) can be used for 'precedence'

-- Broadening | Limiting responses : '%..', '..%', 'B_%..'
SELECT
*
FROM
people
WHERE
company LIKE 'T%a' OR last_name LIKE '%y_n' AND middle_name LIKE '%TE%'
LIMIT 20 OFFSET 5;
-- The module(%) op. inside predicate strgs indicates a portion of fetching to ignore
-- Besides equalTo(=) & IS there's the LIKE comparison op. (it means 'close to it')
-- The percentage(%) op. can only be used with LIKE comp. op. (so it seems)
-- Partial retrievals are available with '%a%'(any) & '%a_n'(between)
-- Searched values aren't case-sensitive (but can be via DDL) @constraints
-- LIMIT is a constraining fetch clause
-- OFFSET sets  the initial removal of indexes(in-length) to LIMIT set-results

-- Organizing | Sorting data : ORDER BY, DESC, ASC
SELECT
p.state_code,
p.first_name AS sorted_name
FROM
people p
ORDER BY p.first_name DESC, p.state_code ASC;
-- It's a composed clause to sort records/registries on defined columns
-- Additional keywords include DESC(descendant) and ASC(ascendant)
-- 'Default' mode (w/out keywords) is ASC
-- Multi-dimensional sorting available through added DESC|ASC, comma(,) separated

-- Researching over-data(functions) : LENGTH(), COUNT(), AVG(), DISTINCT()
SELECT
DISTINCT(first_name),
LENGTH(first_name),
COUNT(company)
FROM
people;
-- Parentheses wraping clauses(applied on columns/values) are 'functions' within SQL
-- Display only first matching of each unique record by using DISTINCT()
-- An added (numbered) column for selected dimension records upon LENGTH()
-- Another numbered column, this time by COUNT() for equal occurencies


-- Crossing data(Joins) : JOIN, INNER, LEFT-RIGHT, OUTER, CROSS
SELECT
ppl.first_name,
st.region
FROM
people ppl
JOIN states st ON ppl.state_code=st.state_abbrev;
WHERE state_code=state_abbrev -- Implicit mode
-- Asking for records across multiple tables via INNER|JOIN clause (common-registry)
-- To add comparison expressions use the 'ON' keyword
-- Possible (but not recommendable) to join without table+wildcard ('table_name.')
-- There's also the 'implicitly'(WHERE instead of JOIN) against 'explicitly'
-- Re-aliasing available for joins (whitout the AS op.) i.e 'table tb'

SELECT
DISTINCT(p.state_code),
s.state_abbrev
FROM
people p
RIGHT JOIN states s ON p.state_code=s.state_abbrev
ORDER BY s.state_abbrev ASC;
-- Sided joins (LEFT<>RIGHT) can be used with|out the added clause-key 'OUTER'
-- 'From' refers the 'left' table and 'Join' the right ones
-- Registries from the opposite 'Outer' data set non-present are outputed as NULL
-- Without explicit sorting(ORDER BY), it will be render based on left-table


-- Aggregating & filtering records : GROUB BY, HAVING
SELECT
state_code,
quiz_points, 
COUNT(quiz_points) AS count
FROM
people
GROUP BY
state_code, quiz_points
HAVING
count > 2;
-- Grouping 'selected' registries across (a common denominator) via GROUP BY
-- Not strictly (but normally) related alongside COUNT() fnc
-- Additional condition criteria is added by the HAVING clause (integers only)
-- Double-dimension groups are available (same as with ORDER BY)

