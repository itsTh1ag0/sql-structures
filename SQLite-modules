/* 
SELECT snippes, notes, statements 
FROM linkedin_course
WHERE Link IS 'https://www.linkedin.com/learning/exams/summative/courses/learning-sql-programming-8382385'
*/
------------------------

-- Selecting & Filtering/Conditoning : SELECT, FROM, WHERE
WHERE 'criteria' OR 'conditional'

SELECT
*
FROM
people
WHERE state_code='CA'; -- predicates can be strict or expressions
-- string predicates are 'case-sensitive' (it can be set on/off at DDL-DB DBMS schema)

-- Multipe Criterias : OR, AND, IS, NOT, !=, <>, ()
SELECT
first_name,
last_name AS surname
FROM
people
WHERE
(state_code <> 'NY' AND shirt_or_hat!='shirt')
OR city IS NOT 'Los Angeles'; 
-- logical 'and'(&&) y 'or'(||) op. are textual
-- comparison 'equalsTo'(=) op. can be textual (as 'IS')
-- expressions predicates(...=...) can or not be 'whitespaced' 
-- can be used different(!= & <>) ops. within expressions
-- brackets (parentheses) can be used for 'precedence'

-- Broadening | Limiting responses : '%..', '..%', 'B_%..'
SELECT
*
FROM
people
WHERE
company LIKE 'T%a' OR last_name LIKE '%y_n' AND middle_name LIKE '%TE%'
LIMIT 20 OFFSET 5;
-- The module(%) op. inside predicate strgs indicates a portion of fetching to ignore
-- Besides equalTo(=) & IS there's the LIKE comparison op. (it means 'close to it')
-- The percentage(%) op. can only be used with LIKE comp. op. (so it seems)
-- Partial retrievals are available with '%a%'(any) & '%a_n'(between)
-- Searched values aren't case-sensitive (but can be via DDL) @constraints
-- LIMIT is a constraining fetch clause
-- OFFSET sets  the initial removal of indexes(in-length) to LIMIT set-results

-- Organizing | Sorting data : ORDER BY, DESC, ASC
SELECT
p.state_code,
p.first_name AS sorted_name
FROM
people p
ORDER BY p.first_name DESC, p.state_code ASC;
-- It's a composed clause to sort records/registries on defined columns
-- Additional keywords include DESC(descendant) and ASC(ascendant)
-- 'Default' mode (w/out keywords) is ASC
-- Multi-dimensional sorting available through added DESC|ASC, comma(,) separated

-- Researching over-data(functions) : LENGTH(), COUNT(), AVG(), DISTINCT()
SELECT
DISTINCT(first_name),
LENGTH(first_name),
COUNT(company)
FROM
people;
-- Parentheses wraping clauses(applied on columns/values) are 'functions' within SQL
-- Display only first matching of each unique record by using DISTINCT()
-- An added (numbered) column for selected dimension records upon LENGTH()
-- Another numbered column, this time by COUNT() for equal occurencies


-- Crossing data(Joins) : JOIN, INNER, LEFT-RIGHT, OUTER, CROSS
SELECT
ppl.first_name,
st.region
FROM
people ppl
JOIN states st ON ppl.state_code=st.state_abbrev;
WHERE state_code=state_abbrev -- Implicit mode
-- Asking for records across multiple tables via INNER|JOIN clause (common-registry)
-- To add comparison expressions use the 'ON' keyword
-- Possible (but not recommendable) to join without table+wildcard ('table_name.')
-- There's also the 'implicitly'(WHERE instead of JOIN) against 'explicitly'
-- Re-aliasing available for joins (whitout the AS op.) i.e 'table tb'

SELECT
DISTINCT(p.state_code),
s.state_abbrev
FROM
people p
RIGHT JOIN states s ON p.state_code=s.state_abbrev
ORDER BY s.state_abbrev ASC;
-- Sided joins (LEFT<>RIGHT) can be used with|out the added clause-key 'OUTER'
-- 'From' refers the 'left' table and 'Join' the right ones
-- Registries from the opposite 'Outer' data set non-present are outputed as NULL
-- Without explicit sorting(ORDER BY), it will be render based on left-table


-- Aggregating & filtering records : GROUB BY, HAVING
SELECT
state_code,
quiz_points, 
COUNT(quiz_points) AS count
FROM
people
GROUP BY
state_code, quiz_points
HAVING
count > 2;
-- Grouping 'selected' registries across (a common denominator) via GROUP BY
-- Not strictly (but normally) related alongside COUNT() fnc
-- Additional condition criteria is added by the HAVING clause (integers only)
-- Double-dimension groups are available (same as with ORDER BY)

-- Data typing : VARCHAR, INT, NULL, DATE, TIME, BOOLEAN ...
DATA TYPE
BINARY, BINARY LARGE OBJECT, BINARY VARYING
BOOLEAN
DATE, INTERVAL, TIME, TIMESTAMP
BIGINT, DECIMAL, DOUBLE PRECISION, FLOAT, INTEGER, INT, NUMERIC, SMALLINT, REAL
CHARACTER, CHARACTER LARGE OBJECT, VARCHAR, NCHAR, NCHAR VARYING, CHAR
-- It follows the same principles of programming (i.e numeric, textual, binary etc...)
-- Specific data-types can store structured data (JSON, key-value) and files
-- Compatibility and variety changes by DBMS & SQL accordingly

-- Mathematics : = + - * / %, <> < > =< >= !=, SUM(), AVG(), MAX(), MIN()
SELECT
team, 
COUNT(*) AS num_members,
SUM(quiz_points) AS points,
SUM(quiz_points)/COUNT(*) OR AVG(quiz_points) -- second gives BFP,
MAX(quiz_points) - MIN(quiz_points)
FROM
people
GROUP BY 
team;
-- Math operations are (mostly) run at the 'select' level (values)
-- Besides sum, avg and count there're others functions such as MAX() and MIN()
-- Hard-coding functions (with Math combinations) doesn't provide float precision

-- Nested querying : Subqueries
SELECT 
*
FROM 
people
WHERE state_code=(SELECT
                    state_abbrev
                    FROM
                    states
                    WHERE state_name='Minnesota');
-- Subquery consists of querying from/within previous (inner) resulting views
-- Can be appended as WHERE|FROM expression predicates
-- Often used as a modular value for expressions

-- Transforms strg data : UPPER(), LOWER(), LTRIM(), REPLACE(), SUBSTRING(), CAST()
REPLACE(), UPPER(), LOWER(), LTRIM(), SUBSTRING(mySQL), SUBSTR(4SQLite), CAST()
SELECT
UPPER(first_name), LOWER(last_name),
TRIM(state_code), LTRIM(quiz_points),
SUBSTRING(company, 2, 5), SUBSTR(company, -5), --length-based
REPLACE(shirt_or_hat, 'hat', "hats"), -- case-sensitive & doubled-quotes
CAST(age AS CHAR)
FROM
people;
-- Camel-case manipulation (VARCHAR-strings) runs through UPPER() and LOWER() fnc
-- Slicing is applied throughout TEXT-strings via SUBSTRING() or SUBSTR(SQLiteOnly)
-- For parsing based operations there's CAST()

-- Re-aliases fields : AS, table_name tbn
SELECT
p.first_name AS 'first name',
UPPER(p.last_name) AS surname
FROM
people p
WHERE surname='Martin'; -- using alias predicate
-- Columns/fields can be renamed using the AS key-clause
-- Table names also just by adding a white-space+newname (no keyword)
-- Aliases are referred within future clauses predicates/expressions
-- Re-aliased tablenames (should) be pre-referred with the '.' wildcard

-- Adds data to tables : INSERT-INTO(), VALUES()
INSERT INTO 
company (register_name, team_name, number_members)
VALUES 
('Microsoft', 'Red Monsters', 12),
('Apple', 'Cup Dinos', 8),
('Meta', 'Zuken Warriors', NULL);
-- For adding values there're the clause-keyword 'insert-into'
-- A inner clause is used (values) to specify the records/registries of input
-- Multi (listed) values insertion present in values clause (can't be 'undefined')

-- Modifies data : UPDATE, SET, WHERE
UPDATE tablename
SET field1='value', field2=999
WHERE condition='value';
-- Updating is made with UPDATE-SET clauses combination (where optional)
-- update-set are 'whitespaced' clauses (agains insert-into-values 'parenthesed')
-- Absence of where clause will cause the update to be set on all records

-- Deletes data: DELETE, WHERE
DELETE FROM `table name`
WHERE condition='value' OR condition IS range_of_values;
-- Another whitespaced clause is delete
-- It doesn't receive params, parentheses or predicates (just the path 'FROM')
-- Deletes all the registries/records matching a given condition (where's criteria)

-- Final notes : Avoiding (Common SQL mistakes) 
/*
 - Typos and syntax errors: read the error and break down (testing) the statement
 - Text values should be in single quotation marks(')
 - Field names with spaces (allowed *not recommended) need to be in backticks(`)
 - Keep a data 'journal' (documentation)
 - Copy and paste in 'plain text' rather than formatted text
 - Smart/Curly quotes(‘, “), used for textual apps, cause problems
 - Share SQL statements as 'plain-text.sql' files or attachments instead chat/email directly
 - To find 'null' values, use IS NULL | IS NOT NULL keywords instead of equality op. (=, !=, <>)
 - Test matching conditions(criterias) *before* using them for dangerous clauses like UPDATE and DELETE
 - Most database software(DMBS) will run all the SQL statements in a given window at once; --> select or switch from files
*/

